name: CI & Security Scan

on:
  push:
    branches:
      - main
      - dev
      - "feat/**"
      - "fix/**"
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build-and-scan:
    name: Build, Lint, Test & Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      # -- Setup Phase -------------------------------------------------
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: üöÄ Install pnpm
        run: npm install -g pnpm

      - name: üóÇÔ∏è Setup pnpm store
        id: pnpm-setup
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: üîÑ Cache pnpm store
        id: pnpm-cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: üì• Install dependencies
        run: npx pnpm install

      # -- Quality Checks ----------------------------------------------
      - name: üßπ Lint code
        run: npx pnpm lint

      # -- Static Analysis (SAST) -------------------------------------
      - name: üõ°Ô∏è Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: üèóÔ∏è Autobuild for CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # -- Secret Scanning --------------------------------------------
      - name: üîê Gitleaks ‚Äì Scan for secrets
        uses: gitleaks/gitleaks-action@v2

      # -- Dependency Scanning (SCA) -----------------------------------
      - name: üì¶ Snyk ‚Äì Check for vulnerable packages
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects

      # -- Build Application (CI only) ---------------------------------
      - name: üèóÔ∏è Build Next.js app (CI check only)
        run: npx pnpm build
        env:
          DB_HOST: localhost
          DB_PORT: "3306"
          DB_USER: root
          DB_PASSWORD: krtn1234
          DB_NAME: pts_system
          DB_SSL: "false"
          DATABASE_URL: "mysql://ci_dummy_user:ci_dummy_password@ci_dummy_host:3306/ci_dummy_db"
          JWT_SECRET: "xP9kM4nJ2hL7vQ8tR5wY3cF6bA0sE1mD"
          NEXT_PUBLIC_SUPABASE_URL: "https://mqrrkuccndpfnhruywuy.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1xcnJrdWNjbmRwZm5ocnV5d3V5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxNjU3MzQsImV4cCI6MjA2NDc0MTczNH0.z_XfNeN23vUyM-aCafVkrkoAJjnzsWXu73dTeY3u1bk"
          SUPABASE_SERVICE_ROLE_KEY: "your-service-role-key"

      # -- Run Tests ---------------------------------------------------
      - name: üß™ Run tests
        run: npx pnpm test
        env:
          DB_HOST: localhost
          DB_PORT: "3306"
          DB_USER: root
          DB_PASSWORD: krtn1234
          DB_NAME: pts_system
          DB_SSL: "false"
          DATABASE_URL: "mysql://ci_dummy_user:ci_dummy_password@ci_dummy_host:3306/ci_dummy_db"
          JWT_SECRET: "xP9kM4nJ2hL7vQ8tR5wY3cF6bA0sE1mD"
          NEXT_PUBLIC_SUPABASE_URL: "https://mqrrkuccndpfnhruywuy.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1xcnJrdWNjbmRwZm5ocnV5d3V5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxNjU3MzQsImV4cCI6MjA2NDc0MTczNH0.z_XfNeN23vUyM-aCafVkrkoAJjnzsWXu73dTeY3u1bk"
          SUPABASE_SERVICE_ROLE_KEY: "your-service-role-key"

      # -- Optional: Docker Compose Build & Test -----------------------
      # Uncomment below to build & run your app inside Docker containers
      # - name: Build Docker Compose services
      #   run: docker-compose build
      #
      # - name: Run Docker Compose services in background
      #   run: docker-compose up -d
      #
      # - name: Wait for app readiness
      #   run: sleep 10
      #
      # - name: Check app is responding
      #   run: curl --fail http://localhost:3000
      #
      # - name: Run tests inside container
      #   run: docker exec pts_next_app pnpm test
      #
      # - name: Stop Docker Compose services
      #   if: always()
      #   run: docker-compose down
