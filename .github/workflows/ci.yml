name: CI & Security Scan

on:
  push:
    branches:
      - main
      - dev
      - 'feat/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  build-and-scan:
    name: Build, Lint, Test & Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      # -- Setup Phase -------------------------------------------------
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🚀 Install pnpm
        run: npm install -g pnpm

      - name: 🗂️ Setup pnpm store
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: 🔄 Cache pnpm store
        id: pnpm-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      # -- Quality Checks ----------------------------------------------
      - name: 🧹 Lint code
        run: pnpm lint

      # -- Static Analysis (SAST) -------------------------------------
      - name: 🛡️ Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: 🏗️ Autobuild for CodeQL
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # -- Secret Scanning --------------------------------------------
      - name: 🔐 Gitleaks – Scan for secrets
        uses: gitleaks/gitleaks-action@v2

      # -- Dependency Scanning (SCA) -----------------------------------
      - name: 📦 Snyk – Check for vulnerable packages
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects

      # -- Build Application (CI only) ---------------------------------
      - name: 🏗️ Build Next.js app (CI check only)
        run: pnpm build
        env:
          DB_HOST: ci_dummy_host
          DB_PORT: "3306"
          DB_USER: ci_dummy_user
          DB_PASSWORD: ci_dummy_password
          DB_NAME: ci_dummy_db
          DB_SSL: "false"
          DATABASE_URL: "mysql://ci_dummy_user:ci_dummy_password@ci_dummy_host:3306/ci_dummy_db"
          JWT_SECRET: "ci_dummy_jwt_secret_for_build_check_only"
          NEXT_PUBLIC_SUPABASE_URL: "https://ci-dummy.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "ci_dummy_key_placeholder"
          SUPABASE_SERVICE_ROLE_KEY: "ci_dummy_service_role_key_placeholder"

      # -- Run Tests ---------------------------------------------------
      - name: 🧪 Run tests
        run: pnpm test
        env:
          NODE_ENV: test
          DB_HOST: ci_dummy_host
          DB_PORT: "3306"
          DB_USER: ci_dummy_user
          DB_PASSWORD: ci_dummy_password
          DB_NAME: ci_dummy_db
          JWT_SECRET: "ci_dummy_jwt_secret_for_test_only"
          NEXT_PUBLIC_SUPABASE_URL: "https://ci-dummy.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "ci_dummy_key_placeholder"

      # -- Optional: Docker Compose Build & Test -----------------------
      # Uncomment below to build & run your app inside Docker containers
      # - name: Build Docker Compose services
      #   run: docker-compose build
      #
      # - name: Run Docker Compose services in background
      #   run: docker-compose up -d
      #
      # - name: Wait for app readiness
      #   run: sleep 10
      #
      # - name: Check app is responding
      #   run: curl --fail http://localhost:3000
      #
      # - name: Run tests inside container
      #   run: docker exec pts_next_app pnpm test
      #
      # - name: Stop Docker Compose services
      #   if: always()
      #   run: docker-compose down
